{"version":3,"sources":["Math.js","components/SimpleRegression.js","CsvFile.js","components/MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["Math","create","all","epsilon","matrix","number","precision","predictable","randomSeed","CalculateAverage","datas","mean","SimpleRegression","useState","explanatoryColumn","responseColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","parseInt","target","value","t","map","type","onChange","console","log","onClick","_copiedValueTable","pop","handleDeleteRow","explanatory","response","xx","xy","x","y","multi","i","length","CalculateMultiply","det","_data","inversedMatrix","inv","coefficient","multiply","CalculateCoefficient","DataToArraySeparatedNewLine","data","split","DataToArraySeparatedComma","CsvFile","fileData","this","FileData","fileDataSeparatedByNewLine","result","shift","Data","array","NonIdData","ExplanatoryData","unshift","ExplanatoryDataWithInterceptPart","normalizedData","tempList","j","SampleNumber","average","standardDeviation","std","CalculatePredictedValues","explanatories","predictedValues","sum","InputDatas","props","rowCount","rows","style","height","columns","hideFooter","rowHeight","headerHeight","MultipleRegressionResult","sampleValues","coefficients","ResponseData","transpose","rSquared","variance","adjustedRSquared","sampleNumber","explanatoryNumber","CalculateAdjustedRSquared","ExplanatoryNumber","unbiasedVariance","responses","sumError","square","CalculateUnbiasedVariance","standardError","sqrt","CalculateStandardError","standardErrorOfCoefficients","CalculateStandardErrorOfCoefficients","tValue","CalculateTValue","createRegressionStatistics","name","regressionStatistics","createOtherData","standardErrorOfCoefficient","otherStatistics","field","Grid","container","direction","spacing","item","xs","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","scope","align","MultipleRegression","gridDatas","setGridDatas","isFileRead","setFileReadState","UpdateDataGrid","Header","parseFloat","justify","alignItems","accept","files","reader","FileReader","onload","NormalizedData","readAsText","App","rootPath","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9804d515.chunk.js","sourcesContent":["import { create, all } from \"mathjs\";\r\n\r\n// create a mathjs instance with configuration\r\nconst config = {\r\n  epsilon: 1e-12,\r\n  matrix: \"Matrix\",\r\n  number: \"number\",\r\n  precision: 64,\r\n  predictable: false,\r\n  randomSeed: null,\r\n};\r\n\r\nexport const Math = create(all, config);\r\n\r\nexport const CalculateAverage = (datas) => {\r\n  return Math.mean(datas);\r\n};\r\n\r\nexport const CalculateStandardDeviation = (datas) => {\r\n  return Math.std(datas);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Math, CalculateAverage } from \"../Math\";\r\n\r\nconst CalculateMultiply = (x, y) => {\r\n  const multi = [];\r\n  for (let i = 0; i < x.length; i++) {\r\n    multi[i] = x[i] * y[i];\r\n  }\r\n  return multi;\r\n};\r\n\r\nconst CalculateCoefficient = (explanatory, response) => {\r\n  const xx = explanatory.map((value) => {\r\n    return value * value;\r\n  });\r\n  const xy = CalculateMultiply(explanatory, response);\r\n  var matrix = Math.matrix([\r\n    [CalculateAverage(xx), CalculateAverage(explanatory)],\r\n    [CalculateAverage(explanatory), 1],\r\n  ]);\r\n  if (Math.det(matrix._data) === 0) {\r\n    return;\r\n  }\r\n  var inversedMatrix = Math.inv(matrix._data);\r\n\r\n  const coefficient = Math.multiply(inversedMatrix, [\r\n    CalculateAverage(xy),\r\n    CalculateAverage(response),\r\n  ]);\r\n  console.log(coefficient);\r\n  return coefficient;\r\n};\r\n\r\nconst SimpleRegression = () => {\r\n  const [valueTable, setValueTable] = useState([\r\n    {\r\n      explanatoryColumn: 0,\r\n      responseColumn: 0,\r\n    },\r\n  ]);\r\n\r\n  const handleAddRow = () => {\r\n    const newRow = { explanatoryColumn: 0, responseColumn: 0 };\r\n    setValueTable([...valueTable, newRow]);\r\n  };\r\n\r\n  const handleDeleteRow = () => {\r\n    const _copiedValueTable = [...valueTable];\r\n    _copiedValueTable.pop();\r\n    setValueTable(_copiedValueTable);\r\n  };\r\n\r\n  const handleChangeInputValue = (index, key) => (e) => {\r\n    const newTable = [...valueTable];\r\n    newTable[index][key] = parseInt(e.target.value);\r\n    setValueTable(newTable);\r\n  };\r\n\r\n  var t = valueTable.map((value, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{index + 1}</td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            onChange={handleChangeInputValue(index, \"explanatoryColumn\")}\r\n            value={value.explanatoryColumn}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            onChange={handleChangeInputValue(index, \"responseColumn\")}\r\n            value={value.responseColumn}\r\n          />\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  console.log(valueTable);\r\n\r\n  return (\r\n    <div>\r\n      単回帰分析\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>{\"No.\"}</td>\r\n            <td>{\"explanatory\"}</td>\r\n            <td>{\"response\"}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{t}</tbody>\r\n      </table>\r\n      <button onClick={() => handleAddRow()}>Add</button>\r\n      <button onClick={() => handleDeleteRow()}>Delete</button>\r\n      <button\r\n        onClick={() =>\r\n          CalculateCoefficient(\r\n            valueTable.map((value) => {\r\n              return value.explanatoryColumn;\r\n            }),\r\n            valueTable.map((value) => {\r\n              return value.responseColumn;\r\n            })\r\n          )\r\n        }\r\n      >\r\n        Calculate\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleRegression;\r\n","import { CalculateAverage, CalculateStandardDeviation } from \"./Math\";\r\n\r\nconst DataToArraySeparatedNewLine = (data) => {\r\n  return data.split(\"\\n\");\r\n};\r\n\r\nconst DataToArraySeparatedComma = (data) => {\r\n  return data.split(\",\");\r\n};\r\n\r\nexport default class CsvFile {\r\n  #FileData;\r\n  constructor(fileData) {\r\n    this.FileData = fileData;\r\n  }\r\n\r\n  get Data() {\r\n    const fileDataSeparatedByNewLine = DataToArraySeparatedNewLine(this.FileData);\r\n\r\n    const result = [];\r\n    for (let i = 0; i < fileDataSeparatedByNewLine.length; i++) {\r\n      result[i] = DataToArraySeparatedComma(fileDataSeparatedByNewLine[i]);\r\n    }\r\n    result.shift();\r\n\r\n    return result;\r\n  }\r\n\r\n  get NonIdData() {\r\n    return this.Data.map((array) => {\r\n      array.shift();\r\n      return array;\r\n    });\r\n  }\r\n\r\n  get Header() {\r\n    return DataToArraySeparatedComma(DataToArraySeparatedNewLine(this.FileData)[0]);\r\n  }\r\n\r\n  get ExplanatoryData() {\r\n    return this.NonIdData.map((array) => {\r\n      array.pop();\r\n      return array;\r\n    });\r\n  }\r\n\r\n  get ExplanatoryDataWithInterceptPart() {\r\n    return this.ExplanatoryData.map((array) => {\r\n      array.unshift(1);\r\n      return array;\r\n    });\r\n  }\r\n\r\n  get ResponseData() {\r\n    return this.NonIdData.map((array) => {\r\n      return array[array.length - 1];\r\n    });\r\n  }\r\n\r\n  get SampleNumber() {\r\n    return this.Data.length;\r\n  }\r\n\r\n  get ExplanatoryNumber() {\r\n    return this.ExplanatoryDataWithInterceptPart[0].length;\r\n  }\r\n\r\n  get NormalizedData() {\r\n    let normalizedData = this.Data;\r\n    for (let i = 1; i < this.Data[0].length; i++) {\r\n      let tempList = [];\r\n      for (let j = 0; j < this.SampleNumber; j++) {\r\n        tempList[j] = this.Data[j][i];\r\n      }\r\n      let average = CalculateAverage(tempList);\r\n      let standardDeviation = CalculateStandardDeviation(tempList);\r\n      for (let j = 0; j < this.SampleNumber; j++) {\r\n        normalizedData[j][i] = (this.Data[j][i] - average) / standardDeviation;\r\n      }\r\n    }\r\n\r\n    return normalizedData;\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  Table,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  TableContainer,\r\n} from \"@material-ui/core\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { Math } from \"../Math\";\r\nimport CsvFile from \"../CsvFile\";\r\n\r\nlet FileData = null;\r\nconst HeaderHeight = 32;\r\nconst RowHeight = 32;\r\n\r\nconst CalculateCoefficient = (explanatories, response) => {\r\n  return Math.multiply(\r\n    Math.multiply(\r\n      Math.inv(\r\n        Math.multiply(Math.transpose(Math.matrix(explanatories)), Math.matrix(explanatories))\r\n      ),\r\n      Math.transpose(Math.matrix(explanatories))\r\n    ),\r\n    Math.matrix(response)\r\n  )._data;\r\n};\r\n\r\nconst CalculatePredictedValues = (coefficient, explanatories) => {\r\n  let predictedValues = [];\r\n  let sum = 0;\r\n  for (let i = 0; i < explanatories.length; i++) {\r\n    for (let j = 0; j < coefficient.length; j++) {\r\n      sum += coefficient[j] * explanatories[i][j];\r\n    }\r\n    predictedValues[i] = sum;\r\n    sum = 0;\r\n  }\r\n  return predictedValues;\r\n};\r\n\r\nconst CalculateRSquared = (predictedValues, sampleValues) => {\r\n  return Math.variance(predictedValues) / Math.variance(sampleValues);\r\n};\r\n\r\nconst CalculateAdjustedRSquared = (rSquared, sampleNumber, explanatoryNumber) => {\r\n  return 1 - (1 - rSquared) * ((sampleNumber - 1) / (sampleNumber - explanatoryNumber));\r\n};\r\n\r\nconst CalculateUnbiasedVariance = (responses, predictedValues, sampleNumber, explanatoryNumber) => {\r\n  let sumError = 0;\r\n  for (let i = 0; i < responses.length; i++) {\r\n    sumError += Math.square(responses[i] - predictedValues[i]);\r\n  }\r\n  return sumError / (sampleNumber - explanatoryNumber);\r\n};\r\n\r\nconst CalculateStandardError = (unbiasedVariance) => {\r\n  return Math.sqrt(unbiasedVariance);\r\n};\r\n\r\nconst CalculateStandardErrorOfCoefficients = (\r\n  unbiasedVariance,\r\n  explanatories,\r\n  explanatoryNumber\r\n) => {\r\n  let standardErrorOfCoefficients = [];\r\n  for (let i = 0; i < explanatoryNumber; i++) {\r\n    standardErrorOfCoefficients[i] = Math.sqrt(\r\n      Math.inv(\r\n        Math.multiply(Math.transpose(Math.matrix(explanatories)), Math.matrix(explanatories))\r\n      )._data[i][i] * unbiasedVariance\r\n    );\r\n  }\r\n  return standardErrorOfCoefficients;\r\n};\r\n\r\nconst CalculateTValue = (coefficients, standardErrorOfCoefficients) => {\r\n  let tValue = [];\r\n  for (let i = 0; i < coefficients.length; i++) {\r\n    tValue[i] = coefficients[i] / standardErrorOfCoefficients[i];\r\n  }\r\n  return tValue;\r\n};\r\n\r\nconst InputDatas = (props) => {\r\n  const rowCount = props.rows.length < 5 ? props.rows.length : 5;\r\n  return (\r\n    <div style={{ height: 15 + HeaderHeight + RowHeight * rowCount }}>\r\n      <DataGrid\r\n        rows={props.rows}\r\n        columns={props.columns}\r\n        hideFooter={true}\r\n        rowHeight={RowHeight}\r\n        headerHeight={HeaderHeight}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MultipleRegressionResult = (props) => {\r\n  var coefficients = CalculateCoefficient(\r\n    FileData.ExplanatoryDataWithInterceptPart,\r\n    FileData.ResponseData\r\n  );\r\n\r\n  const rSquared = CalculateRSquared(\r\n    CalculatePredictedValues(coefficients, FileData.ExplanatoryDataWithInterceptPart),\r\n    FileData.ResponseData\r\n  );\r\n\r\n  const adjustedRSquared = CalculateAdjustedRSquared(\r\n    rSquared,\r\n    FileData.SampleNumber,\r\n    FileData.ExplanatoryNumber\r\n  );\r\n\r\n  const unbiasedVariance = CalculateUnbiasedVariance(\r\n    FileData.ResponseData,\r\n    CalculatePredictedValues(coefficients, FileData.ExplanatoryDataWithInterceptPart),\r\n    FileData.SampleNumber,\r\n    FileData.ExplanatoryNumber\r\n  );\r\n\r\n  const standardError = CalculateStandardError(unbiasedVariance);\r\n\r\n  const standardErrorOfCoefficients = CalculateStandardErrorOfCoefficients(\r\n    unbiasedVariance,\r\n    FileData.ExplanatoryDataWithInterceptPart,\r\n    FileData.ExplanatoryNumber\r\n  );\r\n\r\n  const tValue = CalculateTValue(coefficients, standardErrorOfCoefficients);\r\n\r\n  const createRegressionStatistics = (name, value) => {\r\n    return { name, value };\r\n  };\r\n\r\n  let regressionStatistics = [\r\n    createRegressionStatistics(\"決定係数 R^2\", rSquared),\r\n    createRegressionStatistics(\"補正 R^2\", adjustedRSquared),\r\n    createRegressionStatistics(\"標準誤差\", standardError),\r\n    createRegressionStatistics(\"データ数\", FileData.SampleNumber),\r\n  ];\r\n\r\n  const createOtherData = (name, coefficient, standardErrorOfCoefficient, tValue) => {\r\n    return { name, coefficient, standardErrorOfCoefficient, tValue };\r\n  };\r\n\r\n  let otherStatistics = [\r\n    createOtherData(\"切片\", coefficients[0], standardErrorOfCoefficients[0], tValue[0]),\r\n  ];\r\n  for (let i = 1; i < coefficients.length; i++) {\r\n    otherStatistics[i] = createOtherData(\r\n      props.columns[i].field,\r\n      coefficients[i],\r\n      standardErrorOfCoefficients[i],\r\n      tValue[i]\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"column\" spacing={3}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs></Grid>\r\n          <Grid item xs={8}>\r\n            <TableContainer component={Paper}>\r\n              <Table size=\"small\" aria-label=\"a dense table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell></TableCell>\r\n                    <TableCell>回帰統計</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {regressionStatistics.map((row) => (\r\n                    <TableRow key={row.name}>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.value}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Grid>\r\n          <Grid item xs></Grid>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <TableContainer component={Paper}>\r\n            <Table size=\"small\" aria-label=\"a dense table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell align=\"center\">係数</TableCell>\r\n                  <TableCell align=\"center\">標準誤差</TableCell>\r\n                  <TableCell align=\"center\">t値</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {otherStatistics.map((row) => (\r\n                  <TableRow key={row.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {row.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{row.coefficient}</TableCell>\r\n                    <TableCell align=\"right\">{row.standardErrorOfCoefficient}</TableCell>\r\n                    <TableCell align=\"right\">{row.tValue}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MultipleRegression = () => {\r\n  const [gridDatas, setGridDatas] = useState({\r\n    columns: [],\r\n    rows: [],\r\n  });\r\n\r\n  const [isFileRead, setFileReadState] = useState(false);\r\n\r\n  const handleFiles = () => (e) => {\r\n    if (e.target.files.length === 0) {\r\n      setFileReadState(false);\r\n      FileData = null;\r\n      setGridDatas({ columns: [], rows: [] });\r\n      return;\r\n    }\r\n\r\n    let reader = new FileReader();\r\n    reader.onload = () => {\r\n      FileData = new CsvFile(reader.result);\r\n      console.log(FileData.NormalizedData);\r\n      UpdateDataGrid();\r\n    };\r\n\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const UpdateDataGrid = () => {\r\n    const columns = FileData.Header.map((value) => {\r\n      return { field: value };\r\n    });\r\n\r\n    const rows = [{}];\r\n    for (let i = 0; i < FileData.Data.length; i++) {\r\n      const row = {};\r\n      for (let j = 0; j < FileData.Header.length; j++) {\r\n        const key = FileData.Header[j];\r\n        row[key] = parseFloat(FileData.Data[i][j]);\r\n      }\r\n      rows[i] = row;\r\n    }\r\n    setGridDatas({ columns: columns, rows: rows });\r\n    setFileReadState(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Grid container direction=\"column\" justify=\"space-evenly\" alignItems=\"center\" spacing={3}>\r\n        <Grid item xs>\r\n          <h2>重回帰分析</h2>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <input\r\n            type=\"file\"\r\n            accept=\".csv\"\r\n            onChange={handleFiles()}\r\n            onClick={(e) => {\r\n              e.target.value = \"\";\r\n              setFileReadState(false);\r\n            }}\r\n          />\r\n        </Grid>\r\n        {isFileRead === true && (\r\n          <Grid item xs container>\r\n            <Grid item xs></Grid>\r\n            <Grid item xs={6}>\r\n              <InputDatas columns={gridDatas.columns} rows={gridDatas.rows} />\r\n            </Grid>\r\n            <Grid item xs></Grid>\r\n          </Grid>\r\n        )}\r\n        {isFileRead === true && (\r\n          <Grid item xs>\r\n            <MultipleRegressionResult columns={gridDatas.columns} />\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleRegression;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport SimpleRegression from \"./components/SimpleRegression\";\r\nimport MultipleRegression from \"./components/MultipleRegression\";\r\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  var rootPath = \"/statistics_practice\";\r\n  var top = () => {\r\n    return (\r\n      <div>\r\n        統計処理の練習ページ\r\n        <p>\r\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\r\n        </p>\r\n        <p>\r\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  var simple = () => {\r\n    return (\r\n      <div>\r\n        <SimpleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  var multiple = () => {\r\n    return (\r\n      <div>\r\n        <MultipleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path={rootPath + \"/\"} component={top} />\r\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\r\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}