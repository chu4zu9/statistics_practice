{"version":3,"sources":["SimpleRegression.js","MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleRegression","useState","xColumn","yColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","target","value","t","map","onChange","onClick","_copiedValueTable","pop","handleDeleteRow","FileData","DataToArraySeparatedNewLine","data","split","DataToArraySeparatedComma","TakeDataFromCsvData","csvData","separatedByNewLine","result","i","length","shift","TakeHeaderFromCsvData","MultipleRegression","columns","field","rows","id","x1","x2","y","gridDatas","setGridDatas","UpdateDataGrid","csvFile","row","j","parseInt","console","log","type","files","reader","FileReader","onload","readAsText","style","height","width","pageSize","App","rootPath","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39094944.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst SimpleRegression = () => {\r\n  const [valueTable, setValueTable] = useState([\r\n    {\r\n      xColumn: \"0\",\r\n      yColumn: \"0\",\r\n    },\r\n  ]);\r\n\r\n  const handleAddRow = () => {\r\n    const newRow = { xColumn: \"0\", yColumn: \"0\" };\r\n    setValueTable([...valueTable, newRow]);\r\n  };\r\n\r\n  const handleDeleteRow = () => {\r\n    const _copiedValueTable = [...valueTable];\r\n    _copiedValueTable.pop();\r\n    setValueTable(_copiedValueTable);\r\n  };\r\n\r\n  const handleChangeInputValue = (index, key) => (e) => {\r\n    const newTable = [...valueTable];\r\n    newTable[index] = {\r\n      ...valueTable,\r\n      [key]: e.target.value,\r\n    };\r\n    setValueTable(newTable);\r\n  };\r\n\r\n  var t = valueTable.map((value, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{index + 1}</td>\r\n        <td>\r\n          <input onChange={handleChangeInputValue(index, \"xColumn\")} value={value.xColumn} />\r\n        </td>\r\n        <td>\r\n          <input onChange={handleChangeInputValue(index, \"yColumn\")} value={value.yColumn} />\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      単回帰分析\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>{\"No.\"}</td>\r\n            <td>{\"x\"}</td>\r\n            <td>{\"y\"}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{t}</tbody>\r\n      </table>\r\n      <button onClick={() => handleAddRow()}>Add</button>\r\n      <button onClick={() => handleDeleteRow()}>Delete</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleRegression;\r\n","import React, { useState } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nvar FileData = null;\r\n\r\nconst DataToArraySeparatedNewLine = (data) => {\r\n  return data.split(\"\\n\");\r\n};\r\n\r\nconst DataToArraySeparatedComma = (data) => {\r\n  return data.split(\",\");\r\n};\r\n\r\nconst TakeDataFromCsvData = (csvData) => {\r\n  const separatedByNewLine = DataToArraySeparatedNewLine(csvData);\r\n\r\n  const result = [];\r\n  for (var i = 0; i < separatedByNewLine.length; i++) {\r\n    result[i] = DataToArraySeparatedComma(separatedByNewLine[i]);\r\n  }\r\n  result.shift();\r\n\r\n  return result;\r\n};\r\n\r\nconst TakeNonIdDataFromCsvData = (csvData) => {\r\n  return TakeDataFromCsvData(csvData).map((array) => {\r\n    array.shift();\r\n    return array;\r\n  });\r\n};\r\n\r\nconst TakeHeaderFromCsvData = (csvData) => {\r\n  return DataToArraySeparatedComma(DataToArraySeparatedNewLine(csvData)[0]);\r\n};\r\n\r\nconst MultipleRegression = () => {\r\n  const [gridDatas, setGridDatas] = useState({\r\n    columns: [{ field: \"id\" }, { field: \"x1\" }, { field: \"x2\" }, { field: \"y\" }],\r\n    rows: [\r\n      { id: 1, x1: 0, x2: 0, y: 0 },\r\n      { id: 2, x1: 0, x2: 0, y: 0 },\r\n      { id: 2, x1: 0, x2: 0, y: 0 },\r\n    ],\r\n  });\r\n\r\n  const handleFiles = () => (e) => {\r\n    console.log(\"Called handleFiles\");\r\n    if (e.target.files.length === 0) {\r\n      FileData = null;\r\n      setGridDatas({ columns: {}, rows: {} });\r\n      return;\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = () => {\r\n      FileData = reader.result;\r\n      UpdateDataGrid(FileData);\r\n    };\r\n\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const UpdateDataGrid = (csvFile) => {\r\n    const columns = TakeHeaderFromCsvData(csvFile).map((value) => {\r\n      return { field: value };\r\n    });\r\n\r\n    const rows = [{}];\r\n    for (var i = 0; i < TakeDataFromCsvData(csvFile).length; i++) {\r\n      const row = {};\r\n      for (var j = 0; j < TakeHeaderFromCsvData(csvFile).length; j++) {\r\n        const key = TakeHeaderFromCsvData(csvFile)[j];\r\n        row[key] = parseInt(TakeDataFromCsvData(csvFile)[i][j]);\r\n      }\r\n      rows[i] = row;\r\n    }\r\n    console.log(columns);\r\n    console.log(rows);\r\n    setGridDatas({ columns: columns, rows: rows });\r\n  };\r\n\r\n  console.log(\"render\");\r\n  console.log(gridDatas.columns);\r\n  console.log(gridDatas.rows);\r\n  return (\r\n    <div>\r\n      重回帰分析\r\n      <p>\r\n        <input type=\"file\" onChange={handleFiles()} />\r\n      </p>\r\n      {FileData !== null && (\r\n        <div style={{ height: 400, width: \"100%\" }}>\r\n          <DataGrid rows={gridDatas.rows} columns={gridDatas.columns} pageSize={5} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleRegression;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport SimpleRegression from \"./SimpleRegression\";\r\nimport MultipleRegression from \"./MultipleRegression\";\r\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  var rootPath = \"/statistics_practice\";\r\n  var top = () => {\r\n    return (\r\n      <div>\r\n        統計処理の練習ページ\r\n        <p>\r\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\r\n        </p>\r\n        <p>\r\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  var simple = () => {\r\n    return (\r\n      <div>\r\n        <SimpleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  var multiple = () => {\r\n    return (\r\n      <div>\r\n        <MultipleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path={rootPath + \"/\"} component={top} />\r\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\r\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}