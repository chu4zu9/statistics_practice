{"version":3,"sources":["SimpleRegression.js","MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["SimpleRegression","useState","xColumn","yColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","target","value","t","map","onChange","onClick","_copiedValueTable","pop","handleDeleteRow","MultipleRegression","type","files","length","reader","FileReader","onload","data","csvData","separatedByNewLine","split","result","Array","i","csvToArray","console","log","readAsText","App","rootPath","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQA+DeA,EA7DU,WAAO,IAAD,EACOC,mBAAS,CAC3C,CACEC,QAAS,IACTC,QAAS,OAJgB,mBACtBC,EADsB,KACVC,EADU,KAmBvBC,EAAyB,SAACC,EAAOC,GAAR,OAAgB,SAACC,GAC9C,IAAMC,EAAQ,YAAON,GACrBM,EAASH,GAAT,2BACKH,GADL,kBAEGI,EAAMC,EAAEE,OAAOC,QAElBP,EAAcK,KAGZG,EAAIT,EAAWU,KAAI,SAACF,EAAOL,GAC7B,OACE,+BACE,6BAAKA,EAAQ,IACb,6BACE,uBAAOQ,SAAUT,EAAuBC,EAAO,WAAYK,MAAOA,EAAMV,YAE1E,6BACE,uBAAOa,SAAUT,EAAuBC,EAAO,WAAYK,MAAOA,EAAMT,cANnEI,MAYb,OACE,iEAEE,kCACE,gCACE,+BACE,6BAAK,QACL,6BAAK,MACL,6BAAK,WAGT,gCAAQM,OAEV,wBAAQG,QAAS,WA7CnBX,EAAc,GAAD,mBAAKD,GAAL,CADE,CAAEF,QAAS,IAAKC,QAAS,SA8CtC,iBACA,wBAAQa,QAAS,kBA3CG,WACtB,IAAMC,EAAiB,YAAOb,GAC9Ba,EAAkBC,MAClBb,EAAcY,GAwCWE,IAAvB,wBC1BSC,EA9BY,WAsBzB,OACE,iEAEE,uBAAOC,KAAK,OAAON,SAhBG,SAACN,GACzB,GAA8B,IAA1BA,EAAEE,OAAOW,MAAMC,OAAnB,CAGA,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,WACd,IAAIC,EAdW,SAACC,GAGlB,IAFA,IAAIC,EAAqBD,EAAQE,MAAM,MACnCC,EAAS,IAAIC,MACRC,EAAI,EAAGA,EAAIJ,EAAmBN,OAAQU,IAC7CF,EAAOE,GAAKJ,EAAmBI,GAAGH,MAAM,KAE1C,OAAOC,EAQMG,CAAWV,EAAOO,QAC7BI,QAAQC,IAAIT,IAGdH,EAAOa,WAAW5B,EAAEE,OAAOW,MAAM,Y,cC6BtBgB,EA5CH,WACV,IAAIC,EAAW,uBAgCf,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,EAAW,IAAKG,UAlC/B,WACR,OACE,+FAEE,4BACE,cAAC,IAAD,CAAMC,GAAIJ,EAAW,oBAArB,8CAEF,4BACE,cAAC,IAAD,CAAMI,GAAIJ,EAAW,sBAArB,oDA2BF,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,EAAW,oBAAqBG,UAtB5C,WACX,OACE,gCACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAMC,GAAIJ,EAAW,IAArB,4CAmBA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAMF,EAAW,sBAAuBG,UAd5C,WACb,OACE,gCACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAMC,GAAIJ,EAAW,IAArB,kDCtBOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2213bbfe.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst SimpleRegression = () => {\n  const [valueTable, setValueTable] = useState([\n    {\n      xColumn: \"0\",\n      yColumn: \"0\",\n    },\n  ]);\n\n  const handleAddRow = () => {\n    const newRow = { xColumn: \"0\", yColumn: \"0\" };\n    setValueTable([...valueTable, newRow]);\n  };\n\n  const handleDeleteRow = () => {\n    const _copiedValueTable = [...valueTable];\n    _copiedValueTable.pop();\n    setValueTable(_copiedValueTable);\n  };\n\n  const handleChangeInputValue = (index, key) => (e) => {\n    const newTable = [...valueTable];\n    newTable[index] = {\n      ...valueTable,\n      [key]: e.target.value,\n    };\n    setValueTable(newTable);\n  };\n\n  var t = valueTable.map((value, index) => {\n    return (\n      <tr key={index}>\n        <td>{index + 1}</td>\n        <td>\n          <input onChange={handleChangeInputValue(index, \"xColumn\")} value={value.xColumn} />\n        </td>\n        <td>\n          <input onChange={handleChangeInputValue(index, \"yColumn\")} value={value.yColumn} />\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div>\n      単回帰分析\n      <table>\n        <thead>\n          <tr>\n            <td>{\"No.\"}</td>\n            <td>{\"x\"}</td>\n            <td>{\"y\"}</td>\n          </tr>\n        </thead>\n        <tbody>{t}</tbody>\n      </table>\n      <button onClick={() => handleAddRow()}>Add</button>\n      <button onClick={() => handleDeleteRow()}>Delete</button>\n    </div>\n  );\n};\n\nexport default SimpleRegression;\n","import React, { useState } from \"react\";\n\nconst MultipleRegression = () => {\n  const csvToArray = (csvData) => {\n    var separatedByNewLine = csvData.split(\"\\n\");\n    var result = new Array();\n    for (var i = 0; i < separatedByNewLine.length; i++) {\n      result[i] = separatedByNewLine[i].split(\",\");\n    }\n    return result;\n  };\n  const handleFiles = () => (e) => {\n    if (e.target.files.length === 0) {\n      return;\n    }\n    var reader = new FileReader();\n    reader.onload = () => {\n      var data = csvToArray(reader.result);\n      console.log(data);\n    };\n\n    reader.readAsText(e.target.files[0]);\n  };\n\n  return (\n    <div>\n      重回帰分析\n      <input type=\"file\" onChange={handleFiles()} />\n    </div>\n  );\n};\n\nexport default MultipleRegression;\n","import \"./App.css\";\nimport React from \"react\";\nimport SimpleRegression from \"./SimpleRegression\";\nimport MultipleRegression from \"./MultipleRegression\";\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  var rootPath = \"/statistics_practice\";\n  var top = () => {\n    return (\n      <div>\n        統計処理の練習ページ\n        <p>\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\n        </p>\n        <p>\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\n        </p>\n      </div>\n    );\n  };\n  var simple = () => {\n    return (\n      <div>\n        <SimpleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  var multiple = () => {\n    return (\n      <div>\n        <MultipleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={rootPath + \"/\"} component={top} />\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}