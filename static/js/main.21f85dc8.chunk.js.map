{"version":3,"sources":["Math.js","components/SimpleRegression.js","CsvFile.js","components/MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["Math","create","all","epsilon","matrix","number","precision","predictable","randomSeed","CalculateAverage","datas","mean","SimpleRegression","useState","explanatoryColumn","responseColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","parseInt","target","value","t","map","type","onChange","console","log","onClick","_copiedValueTable","pop","handleDeleteRow","explanatory","response","xx","xy","x","y","multi","i","length","CalculateMultiply","det","_data","inversedMatrix","inv","coefficient","multiply","CalculateCoefficient","DataToArraySeparatedNewLine","data","split","DataToArraySeparatedComma","CsvFile","fileData","this","FileData","fileDataSeparatedByNewLine","result","shift","Data","array","NonIdData","ExplanatoryData","unshift","ExplanatoryDataWithInterceptPart","CalculatePredictedValues","explanatories","predictedValues","sum","j","InputDatas","props","rowCount","rows","style","height","columns","hideFooter","rowHeight","headerHeight","MultipleRegressionResult","sampleValues","coefficients","ResponseData","transpose","rSquared","variance","adjustedRSquared","sampleNumber","explanatoryNumber","CalculateAdjustedRSquared","SampleNumber","ExplanatoryNumber","unbiasedVariance","responses","sumError","square","CalculateUnbiasedVariance","standardError","sqrt","CalculateStandardError","standardErrorOfCoefficients","CalculateStandardErrorOfCoefficients","tValue","CalculateTValue","createRegressionStatistics","name","regressionStatistics","createOtherData","standardErrorOfCoefficient","otherStatistics","field","Grid","container","direction","spacing","item","xs","TableContainer","Table","size","aria-label","TableHead","TableRow","TableCell","TableBody","row","component","scope","align","MultipleRegression","gridDatas","setGridDatas","isFileRead","setFileReadState","UpdateDataGrid","Header","alignItems","accept","files","reader","FileReader","onload","readAsText","App","rootPath","exact","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21f85dc8.chunk.js","sourcesContent":["import { create, all } from \"mathjs\";\n\n// create a mathjs instance with configuration\nconst config = {\n  epsilon: 1e-12,\n  matrix: \"Matrix\",\n  number: \"number\",\n  precision: 64,\n  predictable: false,\n  randomSeed: null,\n};\n\nexport const Math = create(all, config);\n\nexport const CalculateAverage = (datas) => {\n  return Math.mean(datas);\n};\n\nexport const CalculateStandardDeviation = (datas) => {\n  return Math.std(datas);\n};\n","import React, { useState } from \"react\";\nimport { Math, CalculateAverage } from \"../Math\";\n\nconst CalculateMultiply = (x, y) => {\n  const multi = [];\n  for (let i = 0; i < x.length; i++) {\n    multi[i] = x[i] * y[i];\n  }\n  return multi;\n};\n\nconst CalculateCoefficient = (explanatory, response) => {\n  const xx = explanatory.map((value) => {\n    return value * value;\n  });\n  const xy = CalculateMultiply(explanatory, response);\n  var matrix = Math.matrix([\n    [CalculateAverage(xx), CalculateAverage(explanatory)],\n    [CalculateAverage(explanatory), 1],\n  ]);\n  if (Math.det(matrix._data) === 0) {\n    return;\n  }\n  var inversedMatrix = Math.inv(matrix._data);\n\n  const coefficient = Math.multiply(inversedMatrix, [\n    CalculateAverage(xy),\n    CalculateAverage(response),\n  ]);\n  console.log(coefficient);\n  return coefficient;\n};\n\nconst SimpleRegression = () => {\n  const [valueTable, setValueTable] = useState([\n    {\n      explanatoryColumn: 0,\n      responseColumn: 0,\n    },\n  ]);\n\n  const handleAddRow = () => {\n    const newRow = { explanatoryColumn: 0, responseColumn: 0 };\n    setValueTable([...valueTable, newRow]);\n  };\n\n  const handleDeleteRow = () => {\n    const _copiedValueTable = [...valueTable];\n    _copiedValueTable.pop();\n    setValueTable(_copiedValueTable);\n  };\n\n  const handleChangeInputValue = (index, key) => (e) => {\n    const newTable = [...valueTable];\n    newTable[index][key] = parseInt(e.target.value);\n    setValueTable(newTable);\n  };\n\n  var t = valueTable.map((value, index) => {\n    return (\n      <tr key={index}>\n        <td>{index + 1}</td>\n        <td>\n          <input\n            type=\"number\"\n            onChange={handleChangeInputValue(index, \"explanatoryColumn\")}\n            value={value.explanatoryColumn}\n          />\n        </td>\n        <td>\n          <input\n            type=\"number\"\n            onChange={handleChangeInputValue(index, \"responseColumn\")}\n            value={value.responseColumn}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  console.log(valueTable);\n\n  return (\n    <div>\n      単回帰分析\n      <table>\n        <thead>\n          <tr>\n            <td>{\"No.\"}</td>\n            <td>{\"explanatory\"}</td>\n            <td>{\"response\"}</td>\n          </tr>\n        </thead>\n        <tbody>{t}</tbody>\n      </table>\n      <button onClick={() => handleAddRow()}>Add</button>\n      <button onClick={() => handleDeleteRow()}>Delete</button>\n      <button\n        onClick={() =>\n          CalculateCoefficient(\n            valueTable.map((value) => {\n              return value.explanatoryColumn;\n            }),\n            valueTable.map((value) => {\n              return value.responseColumn;\n            })\n          )\n        }\n      >\n        Calculate\n      </button>\n    </div>\n  );\n};\n\nexport default SimpleRegression;\n","const DataToArraySeparatedNewLine = (data) => {\n  return data.split(\"\\n\");\n};\n\nconst DataToArraySeparatedComma = (data) => {\n  return data.split(\",\");\n};\n\nexport default class CsvFile {\n  #FileData;\n  constructor(fileData) {\n    this.FileData = fileData;\n  }\n\n  get Data() {\n    const fileDataSeparatedByNewLine = DataToArraySeparatedNewLine(this.FileData);\n\n    const result = [];\n    for (let i = 0; i < fileDataSeparatedByNewLine.length; i++) {\n      result[i] = DataToArraySeparatedComma(fileDataSeparatedByNewLine[i]);\n    }\n    result.shift();\n\n    return result;\n  }\n\n  get NonIdData() {\n    return this.Data.map((array) => {\n      array.shift();\n      return array;\n    });\n  }\n\n  get Header() {\n    return DataToArraySeparatedComma(DataToArraySeparatedNewLine(this.FileData)[0]);\n  }\n\n  get ExplanatoryData() {\n    return this.NonIdData.map((array) => {\n      array.pop();\n      return array;\n    });\n  }\n\n  get ExplanatoryDataWithInterceptPart() {\n    return this.ExplanatoryData.map((array) => {\n      array.unshift(1);\n      return array;\n    });\n  }\n\n  get ResponseData() {\n    return this.NonIdData.map((array) => {\n      return array[array.length - 1];\n    });\n  }\n\n  get SampleNumber() {\n    return this.Data.length;\n  }\n\n  get ExplanatoryNumber() {\n    return this.ExplanatoryDataWithInterceptPart[0].length;\n  }\n}\n","import React, { useState } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  Table,\n  TableCell,\n  TableHead,\n  TableRow,\n  TableBody,\n  TableContainer,\n} from \"@material-ui/core\";\nimport { Math } from \"../Math\";\nimport CsvFile from \"../CsvFile\";\n\nlet FileData = null;\nconst HeaderHeight = 32;\nconst RowHeight = 32;\n\nconst CalculateCoefficient = (explanatories, response) => {\n  return Math.multiply(\n    Math.multiply(\n      Math.inv(\n        Math.multiply(Math.transpose(Math.matrix(explanatories)), Math.matrix(explanatories))\n      ),\n      Math.transpose(Math.matrix(explanatories))\n    ),\n    Math.matrix(response)\n  )._data;\n};\n\nconst CalculatePredictedValues = (coefficient, explanatories) => {\n  let predictedValues = [];\n  let sum = 0;\n  for (let i = 0; i < explanatories.length; i++) {\n    for (let j = 0; j < coefficient.length; j++) {\n      sum += coefficient[j] * explanatories[i][j];\n    }\n    predictedValues[i] = sum;\n    sum = 0;\n  }\n  return predictedValues;\n};\n\nconst CalculateRSquared = (predictedValues, sampleValues) => {\n  return Math.variance(predictedValues) / Math.variance(sampleValues);\n};\n\nconst CalculateAdjustedRSquared = (rSquared, sampleNumber, explanatoryNumber) => {\n  return 1 - (1 - rSquared) * ((sampleNumber - 1) / (sampleNumber - explanatoryNumber));\n};\n\nconst CalculateUnbiasedVariance = (responses, predictedValues, sampleNumber, explanatoryNumber) => {\n  let sumError = 0;\n  for (let i = 0; i < responses.length; i++) {\n    sumError += Math.square(responses[i] - predictedValues[i]);\n  }\n  return sumError / (sampleNumber - explanatoryNumber);\n};\n\nconst CalculateStandardError = (unbiasedVariance) => {\n  return Math.sqrt(unbiasedVariance);\n};\n\nconst CalculateStandardErrorOfCoefficients = (\n  unbiasedVariance,\n  explanatories,\n  explanatoryNumber\n) => {\n  let standardErrorOfCoefficients = [];\n  for (let i = 0; i < explanatoryNumber; i++) {\n    standardErrorOfCoefficients[i] = Math.sqrt(\n      Math.inv(\n        Math.multiply(Math.transpose(Math.matrix(explanatories)), Math.matrix(explanatories))\n      )._data[i][i] * unbiasedVariance\n    );\n  }\n  return standardErrorOfCoefficients;\n};\n\nconst CalculateTValue = (coefficients, standardErrorOfCoefficients) => {\n  let tValue = [];\n  for (let i = 0; i < coefficients.length; i++) {\n    tValue[i] = coefficients[i] / standardErrorOfCoefficients[i];\n  }\n  return tValue;\n};\n\nconst InputDatas = (props) => {\n  const rowCount = props.rows.length < 5 ? props.rows.length : 5;\n  return (\n    <div style={{ height: 15 + HeaderHeight + RowHeight * rowCount }}>\n      <DataGrid\n        rows={props.rows}\n        columns={props.columns}\n        hideFooter={true}\n        rowHeight={RowHeight}\n        headerHeight={HeaderHeight}\n      />\n    </div>\n  );\n};\n\nconst MultipleRegressionResult = (props) => {\n  var coefficients = CalculateCoefficient(\n    FileData.ExplanatoryDataWithInterceptPart,\n    FileData.ResponseData\n  );\n\n  const rSquared = CalculateRSquared(\n    CalculatePredictedValues(coefficients, FileData.ExplanatoryDataWithInterceptPart),\n    FileData.ResponseData\n  );\n\n  const adjustedRSquared = CalculateAdjustedRSquared(\n    rSquared,\n    FileData.SampleNumber,\n    FileData.ExplanatoryNumber\n  );\n\n  const unbiasedVariance = CalculateUnbiasedVariance(\n    FileData.ResponseData,\n    CalculatePredictedValues(coefficients, FileData.ExplanatoryDataWithInterceptPart),\n    FileData.SampleNumber,\n    FileData.ExplanatoryNumber\n  );\n\n  const standardError = CalculateStandardError(unbiasedVariance);\n\n  const standardErrorOfCoefficients = CalculateStandardErrorOfCoefficients(\n    unbiasedVariance,\n    FileData.ExplanatoryDataWithInterceptPart,\n    FileData.ExplanatoryNumber\n  );\n\n  const tValue = CalculateTValue(coefficients, standardErrorOfCoefficients);\n\n  const createRegressionStatistics = (name, value) => {\n    return { name, value };\n  };\n\n  let regressionStatistics = [\n    createRegressionStatistics(\"決定係数 R^2\", rSquared),\n    createRegressionStatistics(\"補正 R^2\", adjustedRSquared),\n    createRegressionStatistics(\"標準誤差\", standardError),\n    createRegressionStatistics(\"データ数\", FileData.SampleNumber),\n  ];\n\n  const createOtherData = (name, coefficient, standardErrorOfCoefficient, tValue) => {\n    return { name, coefficient, standardErrorOfCoefficient, tValue };\n  };\n\n  let otherStatistics = [\n    createOtherData(\"切片\", coefficients[0], standardErrorOfCoefficients[0], tValue[0]),\n  ];\n  for (let i = 1; i < coefficients.length; i++) {\n    otherStatistics[i] = createOtherData(\n      props.columns[i].field,\n      coefficients[i],\n      standardErrorOfCoefficients[i],\n      tValue[i]\n    );\n  }\n\n  return (\n    <div>\n      <Grid container direction=\"column\" spacing={3}>\n        <Grid container spacing={3}>\n          <Grid item xs></Grid>\n          <Grid item xs={8}>\n            <TableContainer>\n              <Table size=\"small\" aria-label=\"a dense table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell></TableCell>\n                    <TableCell>回帰統計</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {regressionStatistics.map((row) => (\n                    <TableRow key={row.name}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {row.name}\n                      </TableCell>\n                      <TableCell align=\"right\">{row.value}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n          <Grid item xs></Grid>\n        </Grid>\n        <Grid item xs>\n          <TableContainer>\n            <Table size=\"small\" aria-label=\"a dense table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell></TableCell>\n                  <TableCell align=\"center\">係数</TableCell>\n                  <TableCell align=\"center\">標準誤差</TableCell>\n                  <TableCell align=\"center\">t値</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {otherStatistics.map((row) => (\n                  <TableRow key={row.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{row.coefficient}</TableCell>\n                    <TableCell align=\"right\">{row.standardErrorOfCoefficient}</TableCell>\n                    <TableCell align=\"right\">{row.tValue}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nconst MultipleRegression = () => {\n  const [gridDatas, setGridDatas] = useState({\n    columns: [],\n    rows: [],\n  });\n\n  const [isFileRead, setFileReadState] = useState(false);\n\n  const handleFiles = () => (e) => {\n    if (e.target.files.length === 0) {\n      setFileReadState(false);\n      FileData = null;\n      setGridDatas({ columns: [], rows: [] });\n      return;\n    }\n\n    let reader = new FileReader();\n    reader.onload = () => {\n      FileData = new CsvFile(reader.result);\n      UpdateDataGrid();\n    };\n\n    reader.readAsText(e.target.files[0]);\n  };\n\n  const UpdateDataGrid = () => {\n    const columns = FileData.Header.map((value) => {\n      return { field: value };\n    });\n\n    const rows = [{}];\n    for (let i = 0; i < FileData.Data.length; i++) {\n      const row = {};\n      for (let j = 0; j < FileData.Header.length; j++) {\n        const key = FileData.Header[j];\n        row[key] = parseInt(FileData.Data[i][j]);\n      }\n      rows[i] = row;\n    }\n    setGridDatas({ columns: columns, rows: rows });\n    setFileReadState(true);\n  };\n\n  return (\n    <div>\n      <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n        <Grid item xs>\n          重回帰分析\n        </Grid>\n        <Grid item xs>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFiles()}\n            onClick={(e) => {\n              e.target.value = \"\";\n              setFileReadState(false);\n            }}\n          />\n        </Grid>\n        {isFileRead === true && (\n          <div>\n            <Grid item xs>\n              <InputDatas columns={gridDatas.columns} rows={gridDatas.rows} />\n            </Grid>\n            <Grid item xs>\n              <MultipleRegressionResult columns={gridDatas.columns} />\n            </Grid>\n          </div>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default MultipleRegression;\n","import \"./App.css\";\nimport React from \"react\";\nimport SimpleRegression from \"./components/SimpleRegression\";\nimport MultipleRegression from \"./components/MultipleRegression\";\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  var rootPath = \"/statistics_practice\";\n  var top = () => {\n    return (\n      <div>\n        統計処理の練習ページ\n        <p>\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\n        </p>\n        <p>\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\n        </p>\n      </div>\n    );\n  };\n  var simple = () => {\n    return (\n      <div>\n        <SimpleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  var multiple = () => {\n    return (\n      <div>\n        <MultipleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={rootPath + \"/\"} component={top} />\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}