{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","xColumn","yColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","target","value","t","map","onChange","onClick","_copiedValueTable","pop","handleDeleteRow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAqEeA,G,MAlEH,WAAO,IAAD,EACoBC,mBAAS,CAC3C,CACEC,QAAS,IACTC,QAAS,OAJG,mBACTC,EADS,KACGC,EADH,KAmBVC,EAAyB,SAACC,EAAOC,GAAR,OAAgB,SAACC,GAC9C,IAAMC,EAAQ,YAAON,GACrBM,EAASH,GAAT,2BACKH,GADL,kBAEGI,EAAMC,EAAEE,OAAOC,QAElBP,EAAcK,KAGZG,EAAIT,EAAWU,KAAI,SAACF,EAAOL,GAC7B,OACE,+BACE,6BAAKA,EAAQ,IACb,6BACE,uBACEQ,SAAUT,EAAuBC,EAAO,WACxCK,MAAOA,EAAMV,YAGjB,6BACE,uBACEa,SAAUT,EAAuBC,EAAO,WACxCK,MAAOA,EAAMT,cAXVI,MAkBb,OACE,gCACE,kCACE,gCACE,+BACE,6BAAK,QACL,6BAAK,MACL,6BAAK,WAGT,gCAAQM,OAEV,wBAAQG,QAAS,WAlDnBX,EAAc,GAAD,mBAAKD,GAAL,CADE,CAAEF,QAAS,IAAKC,QAAS,SAmDtC,iBACA,wBAAQa,QAAS,kBAhDG,WACtB,IAAMC,EAAiB,YAAOb,GAC9Ba,EAAkBC,MAClBb,EAAcY,GA6CWE,IAAvB,yBCpDSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c347b745.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\n\nconst App = () => {\n  const [valueTable, setValueTable] = useState([\n    {\n      xColumn: \"0\",\n      yColumn: \"0\",\n    },\n  ]);\n\n  const handleAddRow = () => {\n    const newRow = { xColumn: \"0\", yColumn: \"0\" };\n    setValueTable([...valueTable, newRow]);\n  };\n\n  const handleDeleteRow = () => {\n    const _copiedValueTable = [...valueTable];\n    _copiedValueTable.pop();\n    setValueTable(_copiedValueTable);\n  };\n\n  const handleChangeInputValue = (index, key) => (e) => {\n    const newTable = [...valueTable];\n    newTable[index] = {\n      ...valueTable,\n      [key]: e.target.value,\n    };\n    setValueTable(newTable);\n  };\n\n  var t = valueTable.map((value, index) => {\n    return (\n      <tr key={index}>\n        <td>{index + 1}</td>\n        <td>\n          <input\n            onChange={handleChangeInputValue(index, \"xColumn\")}\n            value={value.xColumn}\n          />\n        </td>\n        <td>\n          <input\n            onChange={handleChangeInputValue(index, \"yColumn\")}\n            value={value.yColumn}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <td>{\"No.\"}</td>\n            <td>{\"x\"}</td>\n            <td>{\"y\"}</td>\n          </tr>\n        </thead>\n        <tbody>{t}</tbody>\n      </table>\n      <button onClick={() => handleAddRow()}>Add</button>\n      <button onClick={() => handleDeleteRow()}>Delete</button>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}