{"version":3,"sources":["Math.js","components/SimpleRegression.js","components/MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["Math","create","all","epsilon","matrix","number","precision","predictable","randomSeed","CalculateAverage","datas","mean","SimpleRegression","useState","explanatoryColumn","responseColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","parseInt","target","value","t","map","type","onChange","console","log","onClick","_copiedValueTable","pop","handleDeleteRow","explanatory","response","xx","xy","x","y","multi","i","length","CalculateMultiply","det","_data","inversedMatrix","inv","coefficient","multiply","CalculateCoefficient","FileData","DataToArraySeparatedNewLine","data","split","DataToArraySeparatedComma","TakeDataFromCsvData","csvData","separatedByNewLine","result","shift","TakeNonIdDataFromCsvData","array","TakeHeaderFromCsvData","TakeExplanatoryDataWithInterceptPartFromCsvData","TakeExplanatoryDataFromCsvData","unshift","TakeResponseDataFromCsvData","MultipleRegression","columns","rows","gridDatas","setGridDatas","isFileRead","setFileReadState","UpdateDataGrid","csvFile","field","row","j","rowCount","accept","files","reader","FileReader","onload","predictedValues","sampleValues","coefficients","transpose","rSquare","explanatories","sum","CalculatePredictedValues","variance","readAsText","style","height","width","hideFooter","rowHeight","headerHeight","App","rootPath","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a0cf6d57.chunk.js","sourcesContent":["import { create, all } from \"mathjs\";\n\n// create a mathjs instance with configuration\nconst config = {\n  epsilon: 1e-12,\n  matrix: \"Matrix\",\n  number: \"number\",\n  precision: 64,\n  predictable: false,\n  randomSeed: null,\n};\n\nexport const Math = create(all, config);\n\nexport const CalculateAverage = (datas) => {\n  return Math.mean(datas);\n};\n\nexport const CalculateStandardDeviation = (datas) => {\n  return Math.std(datas);\n};\n","import React, { useState } from \"react\";\nimport { Math, CalculateAverage } from \"../Math\";\n\nconst CalculateMultiply = (x, y) => {\n  const multi = [];\n  for (let i = 0; i < x.length; i++) {\n    multi[i] = x[i] * y[i];\n  }\n  return multi;\n};\n\nconst CalculateCoefficient = (explanatory, response) => {\n  const xx = explanatory.map((value) => {\n    return value * value;\n  });\n  const xy = CalculateMultiply(explanatory, response);\n  var matrix = Math.matrix([\n    [CalculateAverage(xx), CalculateAverage(explanatory)],\n    [CalculateAverage(explanatory), 1],\n  ]);\n  if (Math.det(matrix._data) === 0) {\n    return;\n  }\n  var inversedMatrix = Math.inv(matrix._data);\n\n  const coefficient = Math.multiply(inversedMatrix, [\n    CalculateAverage(xy),\n    CalculateAverage(response),\n  ]);\n  console.log(coefficient);\n  return coefficient;\n};\n\nconst SimpleRegression = () => {\n  const [valueTable, setValueTable] = useState([\n    {\n      explanatoryColumn: 0,\n      responseColumn: 0,\n    },\n  ]);\n\n  const handleAddRow = () => {\n    const newRow = { explanatoryColumn: 0, responseColumn: 0 };\n    setValueTable([...valueTable, newRow]);\n  };\n\n  const handleDeleteRow = () => {\n    const _copiedValueTable = [...valueTable];\n    _copiedValueTable.pop();\n    setValueTable(_copiedValueTable);\n  };\n\n  const handleChangeInputValue = (index, key) => (e) => {\n    const newTable = [...valueTable];\n    newTable[index][key] = parseInt(e.target.value);\n    setValueTable(newTable);\n  };\n\n  var t = valueTable.map((value, index) => {\n    return (\n      <tr key={index}>\n        <td>{index + 1}</td>\n        <td>\n          <input\n            type=\"number\"\n            onChange={handleChangeInputValue(index, \"explanatoryColumn\")}\n            value={value.explanatoryColumn}\n          />\n        </td>\n        <td>\n          <input\n            type=\"number\"\n            onChange={handleChangeInputValue(index, \"responseColumn\")}\n            value={value.responseColumn}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  console.log(valueTable);\n\n  return (\n    <div>\n      単回帰分析\n      <table>\n        <thead>\n          <tr>\n            <td>{\"No.\"}</td>\n            <td>{\"explanatory\"}</td>\n            <td>{\"response\"}</td>\n          </tr>\n        </thead>\n        <tbody>{t}</tbody>\n      </table>\n      <button onClick={() => handleAddRow()}>Add</button>\n      <button onClick={() => handleDeleteRow()}>Delete</button>\n      <button\n        onClick={() =>\n          CalculateCoefficient(\n            valueTable.map((value) => {\n              return value.explanatoryColumn;\n            }),\n            valueTable.map((value) => {\n              return value.responseColumn;\n            })\n          )\n        }\n      >\n        Calculate\n      </button>\n    </div>\n  );\n};\n\nexport default SimpleRegression;\n","import React, { useState } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport { Math } from \"../Math\";\n\nlet FileData = null;\nconst HeaderHeight = 32;\nconst RowHeight = 32;\n\nconst DataToArraySeparatedNewLine = (data) => {\n  return data.split(\"\\n\");\n};\n\nconst DataToArraySeparatedComma = (data) => {\n  return data.split(\",\");\n};\n\nconst TakeDataFromCsvData = (csvData) => {\n  const separatedByNewLine = DataToArraySeparatedNewLine(csvData);\n\n  const result = [];\n  for (let i = 0; i < separatedByNewLine.length; i++) {\n    result[i] = DataToArraySeparatedComma(separatedByNewLine[i]);\n  }\n  result.shift();\n\n  return result;\n};\n\nconst TakeNonIdDataFromCsvData = (csvData) => {\n  return TakeDataFromCsvData(csvData).map((array) => {\n    array.shift();\n    return array;\n  });\n};\n\nconst TakeHeaderFromCsvData = (csvData) => {\n  return DataToArraySeparatedComma(DataToArraySeparatedNewLine(csvData)[0]);\n};\n\nconst TakeExplanatoryDataFromCsvData = (csvData) => {\n  return TakeNonIdDataFromCsvData(csvData).map((array) => {\n    array.pop();\n    return array;\n  });\n};\n\nconst TakeExplanatoryDataWithInterceptPartFromCsvData = (csvData) => {\n  return TakeExplanatoryDataFromCsvData(csvData).map((array) => {\n    array.unshift(1);\n    return array;\n  });\n};\n\nconst TakeResponseDataFromCsvData = (csvData) => {\n  return TakeNonIdDataFromCsvData(csvData).map((array) => {\n    return array[array.length - 1];\n  });\n};\n\nconst CalculateCoefficient = (explanatory, response) => {\n  return Math.multiply(\n    Math.multiply(\n      Math.inv(Math.multiply(Math.transpose(Math.matrix(explanatory)), Math.matrix(explanatory))),\n      Math.transpose(Math.matrix(explanatory))\n    ),\n    Math.matrix(response)\n  )._data;\n};\n\nconst CalculatePredictedValues = (coefficient, explanatories) => {\n  let predictedValues = [];\n  let sum = 0;\n  for (let i = 0; i < explanatories.length; i++) {\n    for (let j = 0; j < coefficient.length; j++) {\n      sum += coefficient[j] * explanatories[i][j];\n    }\n    predictedValues[i] = sum;\n    sum = 0;\n  }\n  return predictedValues;\n};\n\nconst CalculateRSquare = (predictedValues, sampleValues) => {\n  return Math.variance(predictedValues) / Math.variance(sampleValues);\n};\n\nconst MultipleRegression = () => {\n  const [gridDatas, setGridDatas] = useState({\n    columns: [],\n    rows: [],\n  });\n\n  const [isFileRead, setFileReadState] = useState(false);\n\n  const handleFiles = () => (e) => {\n    if (e.target.files.length === 0) {\n      setFileReadState(false);\n      FileData = null;\n      setGridDatas({ columns: [], rows: [] });\n      return;\n    }\n\n    let reader = new FileReader();\n    reader.onload = () => {\n      FileData = reader.result;\n      UpdateDataGrid(FileData);\n      var coefficients = CalculateCoefficient(\n        TakeExplanatoryDataWithInterceptPartFromCsvData(FileData),\n        TakeResponseDataFromCsvData(FileData)\n      );\n\n      const rSquare = CalculateRSquare(\n        CalculatePredictedValues(\n          coefficients,\n          TakeExplanatoryDataWithInterceptPartFromCsvData(FileData)\n        ),\n        TakeResponseDataFromCsvData(FileData)\n      );\n      console.log(rSquare);\n    };\n\n    reader.readAsText(e.target.files[0]);\n  };\n\n  const UpdateDataGrid = (csvFile) => {\n    const columns = TakeHeaderFromCsvData(csvFile).map((value) => {\n      return { field: value };\n    });\n\n    const rows = [{}];\n    for (let i = 0; i < TakeDataFromCsvData(csvFile).length; i++) {\n      const row = {};\n      for (let j = 0; j < TakeHeaderFromCsvData(csvFile).length; j++) {\n        const key = TakeHeaderFromCsvData(csvFile)[j];\n        row[key] = parseInt(TakeDataFromCsvData(csvFile)[i][j]);\n      }\n      rows[i] = row;\n    }\n    setGridDatas({ columns: columns, rows: rows });\n    setFileReadState(true);\n  };\n\n  const rowCount = gridDatas.rows.length < 5 ? gridDatas.rows.length : 5;\n  return (\n    <div>\n      重回帰分析\n      <p>\n        <input\n          type=\"file\"\n          accept=\".csv\"\n          onChange={handleFiles()}\n          onClick={(e) => {\n            e.target.value = \"\";\n          }}\n        />\n      </p>\n      {isFileRead === true && (\n        <div style={{ height: 15 + HeaderHeight + RowHeight * rowCount, width: \"100%\" }}>\n          <DataGrid\n            rows={gridDatas.rows}\n            columns={gridDatas.columns}\n            hideFooter={true}\n            rowHeight={RowHeight}\n            headerHeight={HeaderHeight}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MultipleRegression;\n","import \"./App.css\";\nimport React from \"react\";\nimport SimpleRegression from \"./components/SimpleRegression\";\nimport MultipleRegression from \"./components/MultipleRegression\";\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst App = () => {\n  var rootPath = \"/statistics_practice\";\n  var top = () => {\n    return (\n      <div>\n        統計処理の練習ページ\n        <p>\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\n        </p>\n        <p>\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\n        </p>\n      </div>\n    );\n  };\n  var simple = () => {\n    return (\n      <div>\n        <SimpleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  var multiple = () => {\n    return (\n      <div>\n        <MultipleRegression />\n        <Link to={rootPath + \"/\"}>トップへ</Link>\n      </div>\n    );\n  };\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={rootPath + \"/\"} component={top} />\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}