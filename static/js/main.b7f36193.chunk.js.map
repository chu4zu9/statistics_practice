{"version":3,"sources":["Math.js","components/SimpleRegression.js","components/MultipleRegression.js","App.js","reportWebVitals.js","index.js"],"names":["Math","create","all","epsilon","matrix","number","precision","predictable","randomSeed","CalculateAverage","datas","mean","SimpleRegression","useState","explanatoryColumn","responseColumn","valueTable","setValueTable","handleChangeInputValue","index","key","e","newTable","parseInt","target","value","t","map","type","onChange","console","log","onClick","_copiedValueTable","pop","handleDeleteRow","explanatory","response","xx","xy","x","y","multi","i","length","CalculateMultiply","det","_data","inversedMatrix","inv","coefficient","multiply","CalculateCoefficient","FileData","DataToArraySeparatedNewLine","data","split","DataToArraySeparatedComma","TakeDataFromCsvData","csvData","separatedByNewLine","result","shift","TakeHeaderFromCsvData","MultipleRegression","columns","field","rows","id","x1","x2","gridDatas","setGridDatas","UpdateDataGrid","csvFile","row","j","files","reader","FileReader","onload","readAsText","style","height","autoHeight","hideFooter","App","rootPath","exact","path","component","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7f36193.chunk.js","sourcesContent":["import { create, all } from \"mathjs\";\r\n\r\n// create a mathjs instance with configuration\r\nconst config = {\r\n  epsilon: 1e-12,\r\n  matrix: \"Matrix\",\r\n  number: \"number\",\r\n  precision: 64,\r\n  predictable: false,\r\n  randomSeed: null,\r\n};\r\n\r\nexport const Math = create(all, config);\r\n\r\nexport const CalculateAverage = (datas) => {\r\n  return Math.mean(datas);\r\n};\r\n\r\nexport const CalculateStandardDeviation = (datas) => {\r\n  return Math.std(datas);\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Math, CalculateAverage } from \"../Math\";\r\n\r\nconst CalculateMultiply = (x, y) => {\r\n  const multi = [];\r\n  for (let i = 0; i < x.length; i++) {\r\n    multi[i] = x[i] * y[i];\r\n  }\r\n  return multi;\r\n};\r\n\r\nconst CalculateCoefficient = (explanatory, response) => {\r\n  const xx = explanatory.map((value) => {\r\n    return value * value;\r\n  });\r\n  const xy = CalculateMultiply(explanatory, response);\r\n  var matrix = Math.matrix([\r\n    [CalculateAverage(xx), CalculateAverage(explanatory)],\r\n    [CalculateAverage(explanatory), 1],\r\n  ]);\r\n  if (Math.det(matrix._data) === 0) {\r\n    return;\r\n  }\r\n  var inversedMatrix = Math.inv(matrix._data);\r\n\r\n  const coefficient = Math.multiply(inversedMatrix, [\r\n    CalculateAverage(xy),\r\n    CalculateAverage(response),\r\n  ]);\r\n  console.log(coefficient);\r\n  return coefficient;\r\n};\r\n\r\nconst SimpleRegression = () => {\r\n  const [valueTable, setValueTable] = useState([\r\n    {\r\n      explanatoryColumn: 0,\r\n      responseColumn: 0,\r\n    },\r\n  ]);\r\n\r\n  const handleAddRow = () => {\r\n    const newRow = { explanatoryColumn: 0, responseColumn: 0 };\r\n    setValueTable([...valueTable, newRow]);\r\n  };\r\n\r\n  const handleDeleteRow = () => {\r\n    const _copiedValueTable = [...valueTable];\r\n    _copiedValueTable.pop();\r\n    setValueTable(_copiedValueTable);\r\n  };\r\n\r\n  const handleChangeInputValue = (index, key) => (e) => {\r\n    const newTable = [...valueTable];\r\n    newTable[index][key] = parseInt(e.target.value);\r\n    setValueTable(newTable);\r\n  };\r\n\r\n  var t = valueTable.map((value, index) => {\r\n    return (\r\n      <tr key={index}>\r\n        <td>{index + 1}</td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            onChange={handleChangeInputValue(index, \"explanatoryColumn\")}\r\n            value={value.explanatoryColumn}\r\n          />\r\n        </td>\r\n        <td>\r\n          <input\r\n            type=\"number\"\r\n            onChange={handleChangeInputValue(index, \"responseColumn\")}\r\n            value={value.responseColumn}\r\n          />\r\n        </td>\r\n      </tr>\r\n    );\r\n  });\r\n\r\n  console.log(valueTable);\r\n\r\n  return (\r\n    <div>\r\n      単回帰分析\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <td>{\"No.\"}</td>\r\n            <td>{\"explanatory\"}</td>\r\n            <td>{\"response\"}</td>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{t}</tbody>\r\n      </table>\r\n      <button onClick={() => handleAddRow()}>Add</button>\r\n      <button onClick={() => handleDeleteRow()}>Delete</button>\r\n      <button\r\n        onClick={() =>\r\n          CalculateCoefficient(\r\n            valueTable.map((value) => {\r\n              return value.explanatoryColumn;\r\n            }),\r\n            valueTable.map((value) => {\r\n              return value.responseColumn;\r\n            })\r\n          )\r\n        }\r\n      >\r\n        Calculate\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleRegression;\r\n","import React, { useState } from \"react\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\n\r\nvar FileData = null;\r\nconst HeaderHeight = 56;\r\nconst RowHeight = 52;\r\n\r\nconst DataToArraySeparatedNewLine = (data) => {\r\n  return data.split(\"\\n\");\r\n};\r\n\r\nconst DataToArraySeparatedComma = (data) => {\r\n  return data.split(\",\");\r\n};\r\n\r\nconst TakeDataFromCsvData = (csvData) => {\r\n  const separatedByNewLine = DataToArraySeparatedNewLine(csvData);\r\n\r\n  const result = [];\r\n  for (var i = 0; i < separatedByNewLine.length; i++) {\r\n    result[i] = DataToArraySeparatedComma(separatedByNewLine[i]);\r\n  }\r\n  result.shift();\r\n\r\n  return result;\r\n};\r\n\r\nconst TakeNonIdDataFromCsvData = (csvData) => {\r\n  return TakeDataFromCsvData(csvData).map((array) => {\r\n    array.shift();\r\n    return array;\r\n  });\r\n};\r\n\r\nconst TakeHeaderFromCsvData = (csvData) => {\r\n  return DataToArraySeparatedComma(DataToArraySeparatedNewLine(csvData)[0]);\r\n};\r\n\r\nconst MultipleRegression = () => {\r\n  const [gridDatas, setGridDatas] = useState({\r\n    columns: [{ field: \"id\" }, { field: \"x1\" }, { field: \"x2\" }, { field: \"y\" }],\r\n    rows: [\r\n      { id: 1, x1: 0, x2: 0, y: 0 },\r\n      { id: 2, x1: 0, x2: 0, y: 0 },\r\n      { id: 2, x1: 0, x2: 0, y: 0 },\r\n    ],\r\n  });\r\n\r\n  const handleFiles = () => (e) => {\r\n    console.log(\"Called handleFiles\");\r\n    if (e.target.files.length === 0) {\r\n      FileData = null;\r\n      setGridDatas({ columns: {}, rows: {} });\r\n      return;\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    reader.onload = () => {\r\n      FileData = reader.result;\r\n      UpdateDataGrid(FileData);\r\n    };\r\n\r\n    reader.readAsText(e.target.files[0]);\r\n  };\r\n\r\n  const UpdateDataGrid = (csvFile) => {\r\n    const columns = TakeHeaderFromCsvData(csvFile).map((value) => {\r\n      return { field: value };\r\n    });\r\n\r\n    const rows = [{}];\r\n    for (var i = 0; i < TakeDataFromCsvData(csvFile).length; i++) {\r\n      const row = {};\r\n      for (var j = 0; j < TakeHeaderFromCsvData(csvFile).length; j++) {\r\n        const key = TakeHeaderFromCsvData(csvFile)[j];\r\n        row[key] = parseInt(TakeDataFromCsvData(csvFile)[i][j]);\r\n      }\r\n      rows[i] = row;\r\n    }\r\n    console.log(columns);\r\n    console.log(rows);\r\n    setGridDatas({ columns: columns, rows: rows });\r\n  };\r\n\r\n  console.log(\"render\");\r\n  console.log(gridDatas.columns);\r\n  console.log(gridDatas.rows);\r\n  return (\r\n    <div>\r\n      重回帰分析\r\n      <p>\r\n        <input type=\"file\" onChange={handleFiles()} />\r\n      </p>\r\n      {FileData !== null && (\r\n        <div style={{ height: HeaderHeight + RowHeight * gridDatas.rows.length }}>\r\n          <DataGrid\r\n            rows={gridDatas.rows}\r\n            columns={gridDatas.columns}\r\n            autoHeight={true}\r\n            hideFooter={true}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultipleRegression;\r\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport SimpleRegression from \"./components/SimpleRegression\";\r\nimport MultipleRegression from \"./components/MultipleRegression\";\r\nimport { Link, BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  var rootPath = \"/statistics_practice\";\r\n  var top = () => {\r\n    return (\r\n      <div>\r\n        統計処理の練習ページ\r\n        <p>\r\n          <Link to={rootPath + \"/simpleregression\"}>単回帰分析</Link>\r\n        </p>\r\n        <p>\r\n          <Link to={rootPath + \"/multipleregression\"}>重回帰分析</Link>\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n  var simple = () => {\r\n    return (\r\n      <div>\r\n        <SimpleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  var multiple = () => {\r\n    return (\r\n      <div>\r\n        <MultipleRegression />\r\n        <Link to={rootPath + \"/\"}>トップへ</Link>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path={rootPath + \"/\"} component={top} />\r\n        <Route exact path={rootPath + \"/simpleregression\"} component={simple} />\r\n        <Route exact path={rootPath + \"/multipleregression\"} component={multiple} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}